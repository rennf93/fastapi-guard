{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"FastAPI Guard","text":"<p><code>fastapi-guard</code> is a comprehensive security library for FastAPI applications, providing middleware to control IPs, log requests, and detect penetration attempts. It integrates seamlessly with FastAPI to offer robust protection against various security threats, ensuring your application remains secure and reliable.</p>"},{"location":"#quick-start","title":"Quick Start","text":"<pre><code>from fastapi import FastAPI\nfrom guard.middleware import SecurityMiddleware\nfrom guard.models import SecurityConfig\n\napp = FastAPI()\n\nconfig = SecurityConfig(\n    ipinfo_token=\"your_token_here\",\n    rate_limit=100,\n    auto_ban_threshold=5\n)\n\napp.add_middleware(SecurityMiddleware, config=config)\n</code></pre>"},{"location":"#features","title":"Features","text":"<ul> <li>IP Whitelisting and Blacklisting: Control access based on IP addresses.</li> <li>User Agent Filtering: Block requests from specific user agents.</li> <li>Rate Limiting: Limit the number of requests from a single IP.</li> <li>Automatic IP Banning: Automatically ban IPs after a certain number of suspicious requests.</li> <li>Penetration Attempt Detection: Detect and log potential penetration attempts.</li> <li>Custom Logging: Log security events to a custom file.</li> <li>CORS Configuration: Configure CORS settings for your FastAPI application.</li> <li>Cloud Provider IP Blocking: Block requests from cloud provider IPs (AWS, GCP, Azure).</li> <li>IP Geolocation: Use IPInfo.io API to determine the country of an IP address.</li> </ul>"},{"location":"#documentation","title":"Documentation","text":"<ul> <li>Installation</li> <li>First Steps</li> <li>IP Management</li> <li>Security Features</li> <li>API Reference</li> </ul> <p>\ud83d\udcd6 Learn More in the Tutorial</p>"},{"location":"installation/","title":"Installation","text":"<p>Install <code>fastapi-guard</code> using pip:</p> <pre><code>pip install fastapi-guard\n</code></pre> <p>Note: Ensure you have Python 3.10 or higher installed.</p>"},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<p>Before using <code>fastapi-guard</code>, obtain an IPInfo token:</p> <ol> <li>Visit IPInfo's website to create a free account.</li> <li>After signing up, you'll receive an API token.</li> <li>The free tier includes:</li> <li>Up to 50,000 requests per month.</li> <li>Access to IP to Country database.</li> <li>Daily database updates.</li> <li>IPv4 &amp; IPv6 support.</li> </ol> <p>Usage Example:</p> <pre><code>from fastapi import FastAPI\nfrom fastapi_guard.middleware import SecurityMiddleware\nfrom fastapi_guard.models import SecurityConfig\n\napp = FastAPI()\nconfig = SecurityConfig(\n    ipinfo_token=\"your_ipinfo_token_here\", # Required for IP geolocation\n    whitelist=[\"192.168.1.1\"],\n    blacklist=[\"10.0.0.1\"],\n    blocked_countries=[\"AR\", \"IT\"],\n    blocked_user_agents=[\"curl\", \"wget\"],\n    auto_ban_threshold=5,\n    auto_ban_duration=86400,\n    custom_log_file=\"security.log\",\n)\n\napp.add_middleware(SecurityMiddleware, config=config)\n</code></pre>"},{"location":"release-notes/","title":"Release Notes","text":""},{"location":"api/cloud-manager/","title":"CloudManager","text":"<p>The <code>CloudManager</code> class manages detection of IP addresses from major cloud providers.</p>"},{"location":"api/cloud-manager/#class-definition","title":"Class Definition","text":"<pre><code>class CloudManager:\n    def __init__(self):\n        \"\"\"\n        Initialize cloud IP ranges manager.\n        \"\"\"\n        self.ip_ranges: Dict[str, Set[ipaddress.IPv4Network]] = {}\n        self.refresh()\n</code></pre>"},{"location":"api/cloud-manager/#methods","title":"Methods","text":""},{"location":"api/cloud-manager/#refresh","title":"refresh","text":"<pre><code>def refresh(self):\n    \"\"\"\n    Refresh IP ranges from all cloud providers.\n    \"\"\"\n</code></pre>"},{"location":"api/cloud-manager/#is_cloud_ip","title":"is_cloud_ip","text":"<pre><code>def is_cloud_ip(\n    self,\n    ip: str,\n    providers: Set[str]\n) -&gt; bool:\n    \"\"\"\n    Check if an IP belongs to specified cloud providers.\n\n    Args:\n        ip: IP address to check\n        providers: Set of provider names ('AWS', 'GCP', 'Azure')\n    \"\"\"\n</code></pre>"},{"location":"api/cloud-manager/#usage-example","title":"Usage Example","text":"<pre><code>from guard.handlers.cloud_handler import cloud_handler\n\n# Refresh IP ranges\ncloud_handler.refresh()\n\n# Check if IP is from AWS\nis_aws = cloud_handler.is_cloud_ip(\"54.239.28.85\", {\"AWS\"})\n\n# Check multiple providers\nis_cloud = cloud_handler.is_cloud_ip(\n    \"35.186.224.25\",\n    {\"AWS\", \"GCP\", \"Azure\"}\n)\n</code></pre>"},{"location":"api/ipban-manager/","title":"IPBanManager","text":"<p>The <code>IPBanManager</code> class handles temporary IP bans in your FastAPI application.</p>"},{"location":"api/ipban-manager/#overview","title":"Overview","text":"<pre><code>from guard.handlers.ipban_handler import IPBanManager\n\nip_ban_manager = IPBanManager()\n</code></pre> <p>The <code>IPBanManager</code> uses an in-memory cache to track banned IPs and their ban durations.</p>"},{"location":"api/ipban-manager/#methods","title":"Methods","text":""},{"location":"api/ipban-manager/#ban_ip","title":"ban_ip","text":"<p>Ban an IP address for a specified duration.</p> <pre><code>async def ban_ip(ip: str, duration: int) -&gt; None\n</code></pre> <p>Parameters: - <code>ip</code>: The IP address to ban - <code>duration</code>: Ban duration in seconds</p> <p>Example: <pre><code>await ip_ban_manager.ban_ip(\"192.168.1.1\", 3600)  # Ban for 1 hour\n</code></pre></p>"},{"location":"api/ipban-manager/#is_ip_banned","title":"is_ip_banned","text":"<p>Check if an IP address is currently banned.</p> <pre><code>async def is_ip_banned(ip: str) -&gt; bool\n</code></pre> <p>Parameters: - <code>ip</code>: The IP address to check</p> <p>Returns: - <code>bool</code>: True if the IP is banned, False otherwise</p> <p>Example: <pre><code>is_banned = await ip_ban_manager.is_ip_banned(\"192.168.1.1\")\n</code></pre></p>"},{"location":"api/ipban-manager/#reset","title":"reset","text":"<p>Reset all banned IPs.</p> <pre><code>async def reset() -&gt; None\n</code></pre> <p>Example: <pre><code>await ip_ban_manager.reset()\n</code></pre></p>"},{"location":"api/ipban-manager/#usage-with-securitymiddleware","title":"Usage with SecurityMiddleware","text":"<p>The <code>IPBanManager</code> is automatically integrated when you use the <code>SecurityMiddleware</code>:</p> <pre><code>from fastapi import FastAPI\nfrom guard.middleware import SecurityMiddleware\nfrom guard.models import SecurityConfig\n\napp = FastAPI()\n\nconfig = SecurityConfig(\n    auto_ban_threshold=5,  # Ban after 5 suspicious requests\n    auto_ban_duration=3600  # Ban for 1 hour\n)\n\napp.add_middleware(SecurityMiddleware, config=config)\n</code></pre>"},{"location":"api/ipinfo-manager/","title":"IPInfoManager","text":"<p>The <code>IPInfoManager</code> class handles IP geolocation using IPInfo's database.</p>"},{"location":"api/ipinfo-manager/#class-definition","title":"Class Definition","text":"<pre><code>class IPInfoManager:\n    def __init__(self, token: str):\n        \"\"\"\n        Initialize IPInfoManager with IPInfo token.\n        \"\"\"\n</code></pre>"},{"location":"api/ipinfo-manager/#methods","title":"Methods","text":""},{"location":"api/ipinfo-manager/#initialize","title":"initialize","text":"<pre><code>async def initialize(self):\n    \"\"\"\n    Initialize and download the database if needed.\n    \"\"\"\n</code></pre>"},{"location":"api/ipinfo-manager/#get_country","title":"get_country","text":"<pre><code>def get_country(self, ip: str) -&gt; Optional[str]:\n    \"\"\"\n    Get country code for an IP address.\n    \"\"\"\n</code></pre>"},{"location":"api/ipinfo-manager/#close","title":"close","text":"<pre><code>def close(self):\n    \"\"\"\n    Close the database connection.\n    \"\"\"\n</code></pre>"},{"location":"api/ipinfo-manager/#usage-example","title":"Usage Example","text":"<pre><code>from guard.handlers.ipinfo_handler import IPInfoManager\n\n# Initialize database\nipinfo_db = IPInfoManager(token=\"your_token\")\nawait ipinfo_db.initialize()\n\n# Get country for IP\ncountry = ipinfo_db.get_country(\"8.8.8.8\")\nprint(f\"Country: {country}\")  # Output: \"US\"\n\n# Clean up\nipinfo_db.close()\n</code></pre>"},{"location":"api/overview/","title":"API Reference Overview","text":"<p>FastAPI Guard consists of several core components:</p>"},{"location":"api/overview/#core-components","title":"Core Components","text":"<ul> <li>SecurityMiddleware: The main middleware that handles all security features</li> <li>IPBanManager: Manages IP banning functionality</li> <li>IPInfoManager: Handles IP geolocation using IPInfo's database</li> <li>SusPatterns: Manages suspicious patterns for threat detection</li> <li>CloudManager: Handles cloud provider IP range detection</li> <li>Utilities: Helper functions for logging and request analysis</li> </ul>"},{"location":"api/overview/#key-classes","title":"Key Classes","text":"<pre><code>from guard.middleware import SecurityMiddleware\nfrom guard.models import SecurityConfig\nfrom guard.handlers.cloud_handler import CloudManager\nfrom guard.handlers.ipban_handler import IPBanManager\nfrom guard.handlers.ipinfo_handler import IPInfoManager\nfrom guard.sus_patterns import SusPatterns\n</code></pre>"},{"location":"api/overview/#configuration-model","title":"Configuration Model","text":"<p>The <code>SecurityConfig</code> class is the central configuration point:</p> <pre><code>class SecurityConfig:\n    def __init__(\n        self,\n        ipinfo_token: str,\n        whitelist: Optional[List[str]] = None,\n        blacklist: List[str] = [],\n        blocked_countries: List[str] = [],\n        whitelist_countries: List[str] = [],\n        blocked_user_agents: List[str] = [],\n        auto_ban_threshold: int = 5,\n        auto_ban_duration: int = 3600,\n        rate_limit: int = 100,\n        rate_limit_window: int = 60,\n        enable_cors: bool = False,\n        # ... other parameters\n    ):\n        # ... initialization\n</code></pre>"},{"location":"api/security-middleware/","title":"SecurityMiddleware","text":"<p>The <code>SecurityMiddleware</code> class is the core component of FastAPI Guard that handles all security features.</p>"},{"location":"api/security-middleware/#class-definition","title":"Class Definition","text":"<pre><code>class SecurityMiddleware(BaseHTTPMiddleware):\n    def __init__(\n        self,\n        app: Callable[[Request], Awaitable[Response]],\n        config: SecurityConfig\n    ):\n        # ... initialization\n</code></pre>"},{"location":"api/security-middleware/#methods","title":"Methods","text":""},{"location":"api/security-middleware/#dispatch","title":"dispatch","text":"<pre><code>async def dispatch(\n    self,\n    request: Request,\n    call_next: Callable[[Request], Awaitable[Response]]\n) -&gt; Response:\n    \"\"\"\n    Main method that processes each request through\n    the security pipeline.\n    \"\"\"\n</code></pre>"},{"location":"api/security-middleware/#create_error_response","title":"create_error_response","text":"<pre><code>async def create_error_response(\n    self,\n    status_code: int,\n    default_message: str\n) -&gt; Response:\n    \"\"\"\n    Creates standardized error responses.\n    \"\"\"\n</code></pre>"},{"location":"api/security-middleware/#usage-example","title":"Usage Example","text":"<pre><code>from fastapi import FastAPI\nfrom guard.middleware import SecurityMiddleware\nfrom guard.models import SecurityConfig\n\napp = FastAPI()\n\nconfig = SecurityConfig(\n    ipinfo_token=\"your_token\",\n    rate_limit=100\n)\n\napp.add_middleware(SecurityMiddleware, config=config)\n</code></pre>"},{"location":"api/sus-patterns/","title":"SusPatterns","text":"<p>The <code>SusPatterns</code> class manages suspicious patterns for security threat detection.</p>"},{"location":"api/sus-patterns/#class-definition","title":"Class Definition","text":"<pre><code>class SusPatterns:\n    \"\"\"\n    A singleton class that manages suspicious patterns\n    for security checks.\n    \"\"\"\n</code></pre>"},{"location":"api/sus-patterns/#class-methods","title":"Class Methods","text":""},{"location":"api/sus-patterns/#add_pattern","title":"add_pattern","text":"<pre><code>@classmethod\nasync def add_pattern(\n    cls,\n    pattern: str,\n    custom: bool = False\n) -&gt; None:\n    \"\"\"\n    Add a new pattern to the detection system.\n    \"\"\"\n</code></pre>"},{"location":"api/sus-patterns/#remove_pattern","title":"remove_pattern","text":"<pre><code>@classmethod\nasync def remove_pattern(\n    cls,\n    pattern: str,\n    custom: bool = False\n) -&gt; None:\n    \"\"\"\n    Remove a pattern from the detection system.\n    \"\"\"\n</code></pre>"},{"location":"api/sus-patterns/#get_all_patterns","title":"get_all_patterns","text":"<pre><code>@classmethod\nasync def get_all_patterns(cls) -&gt; List[str]:\n    \"\"\"\n    Get all registered patterns.\n    \"\"\"\n</code></pre>"},{"location":"api/sus-patterns/#usage-example","title":"Usage Example","text":"<pre><code>from guard.sus_patterns import SusPatterns\n\n# Add custom pattern\nawait SusPatterns.add_pattern(\n    r\"malicious_pattern.*\",\n    custom=True\n)\n\n# Get all patterns\npatterns = await SusPatterns.get_all_patterns()\n\n# Remove pattern\nawait SusPatterns.remove_pattern(\n    r\"malicious_pattern.*\",\n    custom=True\n)\n</code></pre>"},{"location":"api/utilities/","title":"Utilities","text":"<p>The <code>utils</code> module provides various helper functions for security operations.</p>"},{"location":"api/utilities/#logging-functions","title":"Logging Functions","text":""},{"location":"api/utilities/#setup_custom_logging","title":"setup_custom_logging","text":"<pre><code>async def setup_custom_logging(\n    log_file: str\n) -&gt; logging.Logger:\n    \"\"\"\n    Setup custom logging for the application.\n    \"\"\"\n</code></pre>"},{"location":"api/utilities/#log_request","title":"log_request","text":"<pre><code>async def log_request(\n    request: Request,\n    logger: logging.Logger\n):\n    \"\"\"\n    Log details of an incoming request.\n    \"\"\"\n</code></pre>"},{"location":"api/utilities/#log_suspicious_activity","title":"log_suspicious_activity","text":"<pre><code>async def log_suspicious_activity(\n    request: Request,\n    reason: str,\n    logger: logging.Logger\n):\n    \"\"\"\n    Log suspicious activity detected in a request.\n    \"\"\"\n</code></pre>"},{"location":"api/utilities/#security-check-functions","title":"Security Check Functions","text":""},{"location":"api/utilities/#is_user_agent_allowed","title":"is_user_agent_allowed","text":"<pre><code>async def is_user_agent_allowed(\n    user_agent: str,\n    config: SecurityConfig\n) -&gt; bool:\n    \"\"\"\n    Check if user agent is allowed.\n    \"\"\"\n</code></pre>"},{"location":"api/utilities/#check_ip_country","title":"check_ip_country","text":"<pre><code>async def check_ip_country(\n    request: Union[str, Request],\n    config: SecurityConfig,\n    ipinfo_db: IPInfoManager\n) -&gt; bool:\n    \"\"\"\n    Check if IP is from a blocked country.\n    \"\"\"\n</code></pre>"},{"location":"api/utilities/#is_ip_allowed","title":"is_ip_allowed","text":"<pre><code>async def is_ip_allowed(\n    ip: str,\n    config: SecurityConfig,\n    ipinfo_db: Optional[IPInfoManager] = None\n) -&gt; bool:\n    \"\"\"\n    Check if IP address is allowed.\n    \"\"\"\n</code></pre>"},{"location":"api/utilities/#detect_penetration_attempt","title":"detect_penetration_attempt","text":"<pre><code>async def detect_penetration_attempt(\n    request: Request\n) -&gt; bool:\n    \"\"\"\n    Detect potential penetration attempts.\n    \"\"\"\n</code></pre>"},{"location":"api/utilities/#usage-examples","title":"Usage Examples","text":"<pre><code>from guard.utils import (\n    setup_custom_logging,\n    log_request,\n    detect_penetration_attempt\n)\n\n# Setup logging\nlogger = await setup_custom_logging(\"security.log\")\n\n# Log request\nawait log_request(request, logger)\n\n# Check for penetration attempts\nis_suspicious = await detect_penetration_attempt(request)\n</code></pre>"},{"location":"tutorial/first-steps/","title":"First Steps","text":"<p>Let's start with a simple example that shows how to add FastAPI Guard to your application.</p>"},{"location":"tutorial/first-steps/#create-a-fastapi-application","title":"Create a FastAPI application","text":"<p>First, create a new FastAPI application:</p> <pre><code>from fastapi import FastAPI\nfrom guard.middleware import SecurityMiddleware\nfrom guard.models import SecurityConfig\n\napp = FastAPI()\n</code></pre>"},{"location":"tutorial/first-steps/#configure-security-settings","title":"Configure Security Settings","text":"<p>Create a <code>SecurityConfig</code> instance with your desired settings:</p> <pre><code>config = SecurityConfig(\n    ipinfo_token=\"your_ipinfo_token_here\",  # Required for geolocation\n    rate_limit=100,  # Max requests per minute\n    auto_ban_threshold=5,  # Ban after 5 suspicious requests\n    custom_log_file=\"security.log\"\n)\n</code></pre>"},{"location":"tutorial/first-steps/#add-the-middleware","title":"Add the Middleware","text":"<p>Add the security middleware to your application:</p> <pre><code>app.add_middleware(SecurityMiddleware, config=config)\n</code></pre>"},{"location":"tutorial/first-steps/#complete-example","title":"Complete Example","text":"<p>Here's a complete example showing basic usage:</p> <pre><code>from fastapi import FastAPI\nfrom guard.middleware import SecurityMiddleware\nfrom guard.models import SecurityConfig\n\napp = FastAPI()\n\nconfig = SecurityConfig(\n    ipinfo_token=\"your_ipinfo_token_here\",\n    whitelist=[\"192.168.1.1\"],\n    blacklist=[\"10.0.0.1\"],\n    blocked_countries=[\"AR\", \"IT\"],\n    rate_limit=100,\n    custom_log_file=\"security.log\"\n)\n\napp.add_middleware(SecurityMiddleware, config=config)\n\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello World\"}\n</code></pre>"},{"location":"tutorial/first-steps/#run-the-application","title":"Run the Application","text":"<p>Run your application using uvicorn:</p> <pre><code>uvicorn main:app --reload\n</code></pre> <p>Your API is now protected by FastAPI Guard! \ud83d\udee1\ufe0f</p>"},{"location":"tutorial/first-steps/#whats-next","title":"What's Next","text":"<ul> <li>Learn about IP Management</li> <li>Configure Rate Limiting</li> <li>Set up Penetration Detection</li> </ul>"},{"location":"tutorial/configuration/cors/","title":"CORS Configuration","text":"<p>FastAPI Guard provides comprehensive CORS (Cross-Origin Resource Sharing) configuration options.</p>"},{"location":"tutorial/configuration/cors/#basic-cors-setup","title":"Basic CORS Setup","text":"<p>Enable CORS with default settings:</p> <pre><code>config = SecurityConfig(\n    enable_cors=True,\n    cors_allow_origins=[\"*\"]\n)\n</code></pre>"},{"location":"tutorial/configuration/cors/#advanced-configuration","title":"Advanced Configuration","text":"<p>Configure specific CORS settings:</p> <pre><code>config = SecurityConfig(\n    enable_cors=True,\n    cors_allow_origins=[\n        \"https://example.com\",\n        \"https://api.example.com\"\n    ],\n    cors_allow_methods=[\"GET\", \"POST\", \"PUT\", \"DELETE\"],\n    cors_allow_headers=[\"*\"],\n    cors_allow_credentials=True,\n    cors_expose_headers=[\"X-Custom-Header\"],\n    cors_max_age=600\n)\n</code></pre>"},{"location":"tutorial/configuration/cors/#origin-patterns","title":"Origin Patterns","text":"<p>Use patterns to match multiple origins:</p> <pre><code>config = SecurityConfig(\n    enable_cors=True,\n    cors_allow_origins=[\n        \"https://*.example.com\",\n        \"https://*.api.example.com\"\n    ]\n)\n</code></pre>"},{"location":"tutorial/configuration/cors/#credentials-support","title":"Credentials Support","text":"<p>Enable credentials support for authenticated requests:</p> <pre><code>config = SecurityConfig(\n    enable_cors=True,\n    cors_allow_credentials=True,\n    cors_allow_origins=[\n        \"https://app.example.com\"  # Must be specific origin when using credentials\n    ]\n)\n</code></pre>"},{"location":"tutorial/configuration/cors/#custom-headers","title":"Custom Headers","text":"<p>Configure custom headers for CORS:</p> <p>```python config = SecurityConfig(     enable_cors=True,     cors_allow_headers=[         \"Authorization\",         \"Content-Type\",         \"X-Custom-Header\"     ],     cors_expose_headers=[         \"X-Custom-Response-Header\"     ] ) </p>"},{"location":"tutorial/configuration/logging/","title":"Logging Configuration","text":"<p>FastAPI Guard provides detailed logging capabilities for security events.</p>"},{"location":"tutorial/configuration/logging/#basic-logging-setup","title":"Basic Logging Setup","text":"<p>Configure basic logging:</p> <pre><code>config = SecurityConfig(\n    custom_log_file=\"security.log\"\n)\n</code></pre>"},{"location":"tutorial/configuration/logging/#log-levels","title":"Log Levels","text":"<p>Configure different log levels:</p> <pre><code>import logging\n\nconfig = SecurityConfig(\n    custom_log_file=\"security.log\",\n    log_level=logging.WARNING\n)\n</code></pre>"},{"location":"tutorial/configuration/logging/#custom-logger","title":"Custom Logger","text":"<p>Use the logging utilities directly:</p> <pre><code>from guard.utils import setup_custom_logging, log_suspicious_activity\n\n# Setup logger\nlogger = await setup_custom_logging(\"custom.log\")\n\n# Log suspicious activity\nawait log_suspicious_activity(\n    request,\n    \"Suspicious pattern detected\",\n    logger\n)\n</code></pre>"},{"location":"tutorial/configuration/logging/#log-format","title":"Log Format","text":"<p>Default log format: <pre><code>2024-01-20 10:15:23 - WARNING - Suspicious activity detected from 192.168.1.1: POST /api/data - Headers: {'User-Agent': 'curl/7.64.1'}\n</code></pre></p>"},{"location":"tutorial/configuration/logging/#request-logging","title":"Request Logging","text":"<p>Log all incoming requests:</p> <pre><code>from guard.utils import log_request\n\n@app.middleware(\"http\")\nasync def log_requests(request: Request, call_next):\n    await log_request(request, logger)\n    response = await call_next(request)\n    return response\n</code></pre>"},{"location":"tutorial/ip-management/banning/","title":"IP Banning","text":"<p>FastAPI Guard provides powerful IP banning capabilities through the <code>IPBanManager</code>.</p>"},{"location":"tutorial/ip-management/banning/#automatic-ip-banning","title":"Automatic IP Banning","text":"<p>Configure automatic IP banning based on suspicious activity:</p> <pre><code>config = SecurityConfig(\n    auto_ban_threshold=5,  # Ban after 5 suspicious requests\n    auto_ban_duration=3600,  # Ban duration in seconds (1 hour)\n)\n</code></pre>"},{"location":"tutorial/ip-management/banning/#manual-ip-banning","title":"Manual IP Banning","text":"<p>You can also manually ban IPs using the <code>IPBanManager</code>:</p> <pre><code>from guard.handlers.ipban_handler import ip_ban_manager\n\n@app.post(\"/admin/ban/{ip}\")\nasync def ban_ip(ip: str, duration: int = 3600):\n    await ip_ban_manager.ban_ip(ip, duration)\n    return {\"message\": f\"IP {ip} banned for {duration} seconds\"}\n</code></pre>"},{"location":"tutorial/ip-management/banning/#checking-ban-status","title":"Checking Ban Status","text":"<p>Check if an IP is currently banned:</p> <pre><code>@app.get(\"/admin/check/{ip}\")\nasync def check_ban(ip: str):\n    is_banned = await ip_ban_manager.is_ip_banned(ip)\n    return {\"ip\": ip, \"banned\": is_banned}\n</code></pre>"},{"location":"tutorial/ip-management/banning/#reset-all-bans","title":"Reset All Bans","text":"<p>Clear all active IP bans:</p> <p>```python @app.post(\"/admin/reset\") async def reset_bans():     await ip_ban_manager.reset()     return {\"message\": \"All IP bans cleared\"} </p>"},{"location":"tutorial/ip-management/cloud-providers/","title":"Cloud Provider IP Blocking","text":"<p>FastAPI Guard can automatically detect and block requests from major cloud providers.</p>"},{"location":"tutorial/ip-management/cloud-providers/#supported-providers","title":"Supported Providers","text":"<p>Currently supported cloud providers: - Amazon Web Services (AWS) - Google Cloud Platform (GCP) - Microsoft Azure</p>"},{"location":"tutorial/ip-management/cloud-providers/#basic-configuration","title":"Basic Configuration","text":"<p>Enable cloud provider IP blocking:</p> <pre><code>config = SecurityConfig(\n    block_cloud_providers={\"AWS\", \"GCP\", \"Azure\"}\n)\n</code></pre>"},{"location":"tutorial/ip-management/cloud-providers/#selective-blocking","title":"Selective Blocking","text":"<p>Block specific providers:</p> <pre><code>config = SecurityConfig(\n    block_cloud_providers={\"AWS\"}  # Only block AWS IPs\n)\n</code></pre>"},{"location":"tutorial/ip-management/cloud-providers/#ip-range-updates","title":"IP Range Updates","text":"<p>Cloud IP ranges are automatically updated daily. You can manually refresh them:</p> <pre><code>from guard.handlers.cloud_handler import cloud_handler\n\n# Refresh IP ranges\ncloud_handler.refresh()\n</code></pre>"},{"location":"tutorial/ip-management/cloud-providers/#custom-ip-checking","title":"Custom IP Checking","text":"<p>Check if an IP belongs to a cloud provider:</p> <pre><code>from guard.handlers.cloud_handler import cloud_handler\n\n@app.get(\"/check-cloud/{ip}\")\nasync def check_cloud_ip(ip: str):\n    is_cloud = cloud_handler.is_cloud_ip(\n        ip,\n        providers={\"AWS\", \"GCP\", \"Azure\"}\n    )\n    return {\"ip\": ip, \"is_cloud\": is_cloud}\n</code></pre>"},{"location":"tutorial/ip-management/geolocation/","title":"IP Geolocation","text":"<p>FastAPI Guard uses IPInfo's database for IP geolocation and country-based filtering.</p>"},{"location":"tutorial/ip-management/geolocation/#setup","title":"Setup","text":"<ol> <li>Get your IPInfo token from ipinfo.io</li> <li>Configure geolocation in your app:</li> </ol> <pre><code>config = SecurityConfig(\n    ipinfo_token=\"your_ipinfo_token_here\",\n    blocked_countries=[\"CN\", \"RU\"],  # Block specific countries\n    whitelist_countries=[\"US\", \"CA\"]  # Optional: only allow specific countries\n)\n</code></pre>"},{"location":"tutorial/ip-management/geolocation/#country-blocking","title":"Country Blocking","text":"<p>Block requests from specific countries using ISO 3166-1 alpha-2 country codes:</p> <pre><code>config = SecurityConfig(\n    ipinfo_token=\"your_ipinfo_token_here\",\n    blocked_countries=[\n        \"CN\",  # China\n        \"RU\",  # Russia\n        \"IR\",  # Iran\n        \"KP\"   # North Korea\n    ]\n)\n</code></pre>"},{"location":"tutorial/ip-management/geolocation/#country-whitelisting","title":"Country Whitelisting","text":"<p>Only allow requests from specific countries:</p> <pre><code>config = SecurityConfig(\n    ipinfo_token=\"your_ipinfo_token_here\",\n    whitelist_countries=[\n        \"US\",  # United States\n        \"CA\",  # Canada\n        \"GB\",  # United Kingdom\n        \"AU\"   # Australia\n    ]\n)\n</code></pre>"},{"location":"tutorial/ip-management/geolocation/#custom-geolocation-logic","title":"Custom Geolocation Logic","text":"<p>You can also use the <code>IPInfoManager</code> directly for custom geolocation logic:</p> <pre><code>from guard.handlers.ipinfo_handler import IPInfoManager\n\nipinfo_db = IPInfoManager(token=\"your_ipinfo_token_here\")\nawait ipinfo_db.initialize()\n\n@app.get(\"/country/{ip}\")\nasync def get_ip_country(ip: str):\n    country = ipinfo_db.get_country(ip)\n    return {\"ip\": ip, \"country\": country}\n</code></pre>"},{"location":"tutorial/security/custom-patterns/","title":"Custom Patterns","text":"<p>FastAPI Guard allows you to add custom patterns for detecting suspicious activity.</p>"},{"location":"tutorial/security/custom-patterns/#adding-custom-patterns","title":"Adding Custom Patterns","text":"<p>Add your own patterns to the detection system:</p> <pre><code>from guard.sus_patterns import SusPatterns\n\nasync def setup_patterns():\n    # Add custom pattern\n    await SusPatterns.add_pattern(\n        r\"malicious_pattern.*\",\n        custom=True\n    )\n</code></pre>"},{"location":"tutorial/security/custom-patterns/#pattern-types","title":"Pattern Types","text":"<p>You can add patterns for different types of attacks:</p> <pre><code># Custom XSS pattern\nawait SusPatterns.add_pattern(\n    r\"&lt;script\\s*src=.*&gt;\",\n    custom=True\n)\n\n# Custom SQL injection pattern\nawait SusPatterns.add_pattern(\n    r\";\\s*DROP\\s+TABLE\",\n    custom=True\n)\n\n# Custom file path pattern\nawait SusPatterns.add_pattern(\n    r\"\\.\\.\\/.*\\/etc\\/passwd\",\n    custom=True\n)\n</code></pre>"},{"location":"tutorial/security/custom-patterns/#managing-patterns","title":"Managing Patterns","text":"<p>Remove or modify existing patterns:</p> <pre><code># Remove a custom pattern\nawait SusPatterns.remove_pattern(\n    r\"malicious_pattern.*\",\n    custom=True\n)\n\n# Get all patterns\npatterns = await SusPatterns.get_all_patterns()\n\n# Get compiled patterns\ncompiled_patterns = await SusPatterns.get_all_compiled_patterns()\n</code></pre>"},{"location":"tutorial/security/custom-patterns/#pattern-testing","title":"Pattern Testing","text":"<p>Test your patterns against requests:</p> <pre><code>from guard.utils import detect_penetration_attempt\n\n@app.post(\"/test/patterns\")\nasync def test_patterns(request: Request):\n    is_suspicious = await detect_penetration_attempt(request)\n    return {\n        \"suspicious\": is_suspicious,\n        \"request_body\": await request.body()\n    }\n</code></pre>"},{"location":"tutorial/security/penetration-detection/","title":"Penetration Detection","text":"<p>FastAPI Guard includes sophisticated penetration attempt detection to identify and block malicious requests.</p>"},{"location":"tutorial/security/penetration-detection/#basic-configuration","title":"Basic Configuration","text":"<p>Enable penetration detection:</p> <pre><code>config = SecurityConfig(\n    enable_penetration_detection=True,\n    auto_ban_threshold=5,  # Ban after 5 suspicious requests\n    auto_ban_duration=3600  # Ban duration in seconds\n)\n</code></pre>"},{"location":"tutorial/security/penetration-detection/#detection-patterns","title":"Detection Patterns","text":"<p>The system checks for various attack patterns including:</p> <ul> <li>SQL Injection attempts</li> <li>XSS (Cross-Site Scripting)</li> <li>Command Injection</li> <li>Path Traversal</li> <li>Template Injection</li> <li>HTTP Response Splitting</li> <li>LDAP Injection</li> <li>XML Injection</li> <li>NoSQL Injection</li> <li>File Upload attacks</li> </ul>"},{"location":"tutorial/security/penetration-detection/#custom-detection-logic","title":"Custom Detection Logic","text":"<p>You can use the penetration detection directly in your routes:</p> <pre><code>from guard.utils import detect_penetration_attempt\n\n@app.post(\"/api/data\")\nasync def submit_data(request: Request):\n    if await detect_penetration_attempt(request):\n        return JSONResponse(\n            status_code=400,\n            content={\"error\": \"Suspicious activity detected\"}\n        )\n    # Process legitimate request\n    return {\"status\": \"success\"}\n</code></pre>"},{"location":"tutorial/security/penetration-detection/#logging-suspicious-activity","title":"Logging Suspicious Activity","text":"<p>Configure logging for suspicious activities:</p> <pre><code>config = SecurityConfig(\n    custom_log_file=\"security.log\",\n    log_level=\"WARNING\"\n)\n</code></pre> <p>Example log output: <pre><code>2024-01-20 10:15:23 - WARNING - Suspicious activity detected from 192.168.1.1: POST /api/data - Reason: SQL injection attempt\n</code></pre></p>"},{"location":"tutorial/security/rate-limiting/","title":"Rate Limiting","text":"<p>FastAPI Guard includes built-in rate limiting to protect your API from abuse.</p>"},{"location":"tutorial/security/rate-limiting/#basic-rate-limiting","title":"Basic Rate Limiting","text":"<p>Configure basic rate limiting:</p> <pre><code>config = SecurityConfig(\n    rate_limit=100,  # Maximum requests per minute\n    rate_limit_window=60  # Time window in seconds\n)\n</code></pre>"},{"location":"tutorial/security/rate-limiting/#custom-rate-limits","title":"Custom Rate Limits","text":"<p>You can set different rate limits for different paths:</p> <pre><code>config = SecurityConfig(\n    rate_limit=100,  # Default rate limit\n    rate_limit_paths={\n        \"/api/public\": 1000,  # Higher limit for public API\n        \"/api/admin\": 50      # Lower limit for admin API\n    }\n)\n</code></pre>"},{"location":"tutorial/security/rate-limiting/#rate-limit-headers","title":"Rate Limit Headers","text":"<p>The middleware adds rate limit headers to responses:</p> <ul> <li><code>X-RateLimit-Limit</code>: Maximum requests allowed</li> <li><code>X-RateLimit-Remaining</code>: Remaining requests in window</li> <li><code>X-RateLimit-Reset</code>: Time until rate limit resets</li> </ul>"},{"location":"tutorial/security/rate-limiting/#handling-rate-limits","title":"Handling Rate Limits","text":"<p>When rate limits are exceeded, the middleware returns a 429 (Too Many Requests) response:</p> <pre><code>from fastapi import Request, HTTPException\nfrom fastapi.responses import JSONResponse\n\n@app.exception_handler(HTTPException)\nasync def rate_limit_handler(request: Request, exc: HTTPException):\n    if exc.status_code == 429:\n        return JSONResponse(\n            status_code=429,\n            content={\n                \"error\": \"Rate limit exceeded\",\n                \"retry_after\": request.headers.get(\"Retry-After\")\n            }\n        )\n    raise exc\n</code></pre>"}]}